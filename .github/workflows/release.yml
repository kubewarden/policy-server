name: Release policy server
on:
  workflow_run:
    workflows: ["Build policy server"]
    types:
      - completed
    branches:
      - "v*"

jobs:
  release:
    name: Create release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:

      - name: Get old release tag
        id: get_old_release_tag
        uses: actions/github-script@v6
        with:
          script: |
            let release = await github.rest.repos.getLatestRelease({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });

            if (release.status  === 200 ) {
              core.setOutput('release_tag', release.data.tag_name)
              return
            }
            core.setFailed("Cannot find latest release")

      - name: Get release ID from the release created by release drafter
        uses: actions/github-script@v6
        with:
          script: |
            let releases = await github.rest.repos.listReleases({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });
            for (const release of releases.data) {
              if (release.draft) {
                      core.info(release)
                      core.exportVariable('RELEASE_ID', release.id)
                      return
              }
            }
            core.setFailed(`Draft release not found`)

      - name: Download build artifacts
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith("policy-server")
            });
            for (const artifact of matchArtifact) {
              let download = await github.rest.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: artifact.id,
                 archive_format: 'zip',
              });
              let fs = require('fs');
              file_path = `${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`;
              fs.writeFileSync(file_path, Buffer.from(download.data));
            }

      - name: 'Unzip build artifacts'
        run: unzip -n "policy-server-*.zip" -d artifacts

      - name: Upload release assets
        id: upload_release_assets
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            // The artifact directory is defined in the previous step. When the
            // zip files are expanded.
            let files = fs.readdirSync("artifacts")
            // Envvar exported in the step para the draft release is found
            const {RELEASE_ID} = process.env

            for (const file of files) {
              let file_data = fs.readFileSync(`artifacts/${file}`);

              let response = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: `${RELEASE_ID}`,
                name: file,
                data: file_data,
              });
            }

      - name: Publish release
        uses: actions/github-script@v6
        with:
          script: |
            const {RELEASE_ID} = process.env
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${RELEASE_ID}`,
              draft: false,
              tag_name: `${{ github.event.workflow_run.head_branch }}`,
              name: `${{ github.event.workflow_run.head_branch }}`,
              prerelease: `${{ contains(github.event.workflow_run.head_branch, '-alpha') || contains(github.event.workflow_run.head_branch, '-beta') || contains(github.event.workflow_run.head_branch, '-rc') }}`,
            });

      - name: Get new release tag
        id: get_new_release_tag
        uses: actions/github-script@v6
        with:
          script: |
            let release = await github.rest.repos.getLatestRelease({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });

            if (release.status  === 200 ) {
              core.setOutput('release_tag', release.data.tag_name)
              return
            }
            core.setFailed("Cannot find latest release")

      - name: Trigger chart update
        uses: peter-evans/repository-dispatch@26b39ed245ab8f31526069329e112ab2fb224588 # v2.1.1
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          repository: "${{github.repository_owner}}/helm-charts"
          event-type: update-chart
          client-payload: '{"version": "${{ steps.get_new_release_tag.outputs.release_tag }}", "oldVersion": "${{ steps.get_old_release_tag.outputs.release_tag }}", "repository": "${{ github.repository }}"}'
